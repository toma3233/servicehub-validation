#################################################################################
#                               OneBranch Pipelines                             #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none

parameters:
  - name: "rolloutType"
    displayName: "SDP rollout type"
    type: string
    default: "normal"
    values:
      - normal
      - emergency
      - globaloutage

  - name: "overrideManagedValidationDuration"
    displayName: "Override standard SDP duration?"
    type: boolean
    default: false

  - name: "managedValidationDurationInHours"
    # This parameter is only used when overrideManagedValidationDuration is set to true.
    # For normal rollouts, value must be greater than or equal to 24 hours.
    # For emergency rollouts, value must be greater than or equal to 1 hour.
    # For globaloutage rollouts, value must be greater than or equal to 0 hours
    displayName: "Override standard SDP duration (in hours)"
    type: number
    # We don't actually use this parameter in the template, but we need to set a default value to avoid validation errors.
    # If we do set overrideManagedValidationDuration to true, this parameter can get set at pipeline runtime.
    default: 0

  - name: "icmIncidentId"
    displayName: "IcM Incident Id"
    type: number
    default: 0

  - name: artifactBuildId
    displayName: Artifact Build Id (buildId in the url for the pipeline run to download artifacts from).
    type: string
    default: latest

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    ev2ManagedSdpRolloutConfig:
      rolloutType: ${{parameters.rolloutType}}
      overrideManagedValidationDuration: ${{parameters.overrideManagedValidationDuration}}
      managedValidationOverrideDurationInHours: ${{parameters.managedValidationDurationInHours}}
      icmIncidentId: ${{parameters.icmIncidentId}}
    stages:
      # Build stage included to log the artifact version. Currently commented out to avoid needing pre-release policy validation.
      # More info: https://eng.ms/docs/products/onebranch/securitycompliancegovernanceandpolicies/pipelinerequirements/peerreviewandpopcompliance

      # - stage: build
      #   displayName: "Build: Artifact version"
      #   jobs:
      #     - job: OutputBuildArtifactVersion
      #       pool:
      #         type: linux
      #       variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
      #         ob_outputDirectory: "$(Build.SourcesDirectory)/Ev2Artifacts" # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
      #       steps:
      #         - task: DownloadPipelineArtifact@2
      #           name: downloadBuildArtifactsTemp
      #           displayName: Download Build Pipeline artifacts
      #           inputs:
      #             buildType: "specific"
      #             project: $(projectName)
      #             definition: $(buildDefinitionId)
      #             preferTriggeringPipeline: true
      #             ${{ if eq(parameters.artifactBuildId, 'latest') }}:
      #               buildVersionToDownload: "latest"
      #             ${{ if ne(parameters.artifactBuildId, 'latest') }}:
      #               buildVersionToDownload: "specific"
      #               runId: "${{ parameters.artifactBuildId }}"
      #             targetPath: "$(Pipeline.Workspace)/temp-artifacts"
      #         - task: Bash@3
      #           displayName: Log Build Artifact version and
      #           inputs:
      #             targetType: "inline"
      #             script: |
      #               echo "##vso[task.logissue type=warning]Build Number: $(downloadBuildArtifactsTemp.BuildNumber)"
      #               cd $(Pipeline.Workspace)/temp-artifacts/drop_combineArtifacts_prepare/Ev2Specs
      #               if [ -f "Version.txt" ]; then
      #                 artifactVersion=$(sed -n '1p' Version.txt)
      #                 echo "##vso[task.logissue type=warning]Your artifacts version is: ${artifactVersion}"
      #               else
      #                   exit 1
      #               fi
      #             failOnStderr: false
      # PROD (Public)
      # TODO: Add a stage for auto approval to integration test env.
      - stage: "PROD_Managed_SDP"
        displayName: "PROD: Managed SDP"
        variables:
          ob_release_environment: Production
        jobs:
          - job: PROD_Managed_SDP
            displayName: "PROD_Managed_SDP"
            pool:
              type: release # read more about custom job types at https://aka.ms/obpipelines/yaml/jobs
            steps:
              - task: DownloadPipelineArtifact@2
                name: downloadBuildArtifacts
                displayName: Download Build Pipeline artifacts
                inputs:
                  buildType: "specific"
                  project: $(projectName)
                  definition: $(buildDefinitionId)
                  preferTriggeringPipeline: true
                  ${{ if eq(parameters.artifactBuildId, 'latest') }}:
                    buildVersionToDownload: "latest"
                  ${{ if ne(parameters.artifactBuildId, 'latest') }}:
                    buildVersionToDownload: "specific"
                    runId: "${{ parameters.artifactBuildId }}"
                  targetPath: "$(Pipeline.Workspace)/build-artifacts"
              - task: vsrm-ev2.ev2-rollout.ev2-rollout-task.Ev2RARollout@2
                displayName: "Ev2 Managed SDP Rollout"
                inputs:
                  EndpointProviderType: ApprovalService
                  ApprovalServiceEnvironment: Production
                  TaskAction: RegisterAndRollout
                  SkipRegistrationIfExists: true
                  ServiceRootPath: $(Pipeline.Workspace)/build-artifacts/drop_combineArtifacts_prepare/Ev2Specs
                  RolloutSpecPath: $(Pipeline.Workspace)/build-artifacts/drop_combineArtifacts_prepare/Ev2Specs/rolloutSpec.json
                  StageMapName: "Microsoft.Azure.SDP.Standard"
                  ForceRegistration: true
                  Select: regions($(regionNames))
