# This dummy deployment exists solely to trigger the Azure Key Vault CSI driver to sync the referenced certificate from Key Vault into a Kubernetes secret.
#
# Why is this needed?
# - The CSI driver only syncs secrets when a pod mounts the volume referencing the SecretProviderClass (here: 'csharpuserrp-keyvault-cert').
# - Ingress controllers (like NGINX or AGIC) typically consume TLS secrets but do NOT mount volumes, so the secret would not be created unless a pod like this exists.
# - This pod mounts the CSI volume, causing the driver to fetch and sync the certificate from Key Vault into a Kubernetes secret, which ingress can then use for TLS termination.
# - The pod uses busybox and just sleeps indefinitely, it does not need to do any real work.
#
# For more details, see: https://learn.microsoft.com/en-us/azure/aks/csi-secrets-store-configuration-options#sync-mounted-content-with-a-kubernetes-secret
#
# This pattern is required for CSI secret sync with ingress TLS, unless your workload pod already mounts the secret volume.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userrp-secretssyncpod
  namespace: {{ include "server.fullname" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: secretssyncpod
  template:
    metadata:
      labels:
        app: secretssyncpod
    spec:
      serviceAccountName: {{ include "server.serviceAccountName" . }}
      containers:
        - name: busybox
          image: mcr.microsoft.com/oss/busybox/busybox:1.33.1
          command:
            - "/bin/sh"
            - "-c"
            - "sleep infinity"
          volumeMounts:
          - name: secrets-store
            mountPath: "/mnt/secrets-store"
            readOnly: true
      volumes:
        - name: secrets-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: csharpuserrp-keyvault-cert